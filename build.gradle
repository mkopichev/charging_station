plugins {
  id 'java'
  id 'application'
  id 'org.javamodularity.moduleplugin' version '1.8.12'
  id 'org.openjfx.javafxplugin' version '0.0.13'
  id 'org.beryx.jlink' version '2.25.0'
}

group 'org'
version '0.1'

repositories {
  mavenCentral()
}

ext {
  junitVersion = '5.10.2'
}

sourceCompatibility = '21'
targetCompatibility = '21'

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

application {
  mainModule = 'org.charging_station'
  mainClass = 'org.charging_station.HelloApplication'
}

javafx {
  version = '21'
  modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {

  testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
  implementation("com.fazecast:jSerialComm:2.11.0")
}

test {
useJUnitPlatform()}

jlink {
  imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
  options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
  launcher {
    name = 'app'
  }
}

jlinkZip {
  group = 'distribution'
}

ext.os = org.gradle.internal.os.OperatingSystem.current()

jlink {
  imageZip = project.file("${layout.buildDirectory}/distributions/app-${javafx.platform.classifier}.zip")
  options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
  launcher {
    name = 'Charger Tester'
  }

  jpackage {

    if (os.macOsX) {
      icon = "src/main/resources/org/charging_station/appIcon.icns"
    }

    mainClass = "org.charging_station.MainApplication"

    if (os.windows) {
      installerOptions += [
              '--win-per-user-install',
              '--win-dir-chooser',
              '--win-menu',
              '--win-shortcut'
      ]
      icon = "src/main/resources/org/charging_station/appIcon.ico"
    }
  }
}

jlinkZip {
  group = 'distribution'
}